# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gKO9f5JDApM3S6QT-O7E4kHNgeNmhJ8M
"""


import nltk
from nltk.tokenize import sent_tokenize, word_tokenize
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from nltk import ne_chunk, pos_tag, tree
import requests
from bs4 import BeautifulSoup

# Get the news article from a URL
url = "https://www.bbc.com/sport/football/61434671"
response = requests.get(url)
soup = BeautifulSoup(response.content, "html.parser")
text = soup.get_text()

# Tokenize the text into sentences
sentences = sent_tokenize(text)

# Define stop words
stop_words = set(stopwords.words('english'))

# Define lemmatizer
lemmatizer = WordNetLemmatizer()

# Initialize variables for counting the number of correct and extracted events
correct_events = 0
extracted_events = 0

# Extract entities from each sentence
for sentence in sentences:
    # Tokenize the sentence into words
    words = word_tokenize(sentence)
    
    # Remove stop words
    words = [word for word in words if word.casefold() not in stop_words]
    
    # Lemmatize words
    words = [lemmatizer.lemmatize(word) for word in words]
    
    # Perform part of speech tagging
    pos_tags = pos_tag(words)
    
    # Extract named entities using NLTK's ne_chunk function
    named_entities = ne_chunk(pos_tags, binary=False)
    
    # Extract sports events from named entities
    for entity in named_entities:
        if isinstance(entity, tree.Tree) and entity.label() == "ORGANIZATION":
            sports_event = []
            for leaf in entity.leaves():
                if leaf[1] == "NNP":
                    sports_event.append(leaf[0])
            if "vs" in words:
                extracted_events += 1
                # Check if the extracted event is correct by comparing it to a gold standard dataset
                if "Manchester United vs Liverpool" in " ".join(sports_event):
                    correct_events += 1

# Calculate precision
precision = correct_events / extracted_events

print("Precision:", precision)
